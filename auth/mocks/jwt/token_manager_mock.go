// Code generated by MockGen. DO NOT EDIT.
// Source: ../internal/domain/ports/token_manager.go
//
// Generated by this command:
//
//	mockgen -source=../internal/domain/ports/token_manager.go -destination=jwt/token_manager_mock.go -package=jwt
//

// Package jwt is a generated GoMock package.
package jwt

import (
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenManager is a mock of TokenManager interface.
type MockTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockTokenManagerMockRecorder
	isgomock struct{}
}

// MockTokenManagerMockRecorder is the mock recorder for MockTokenManager.
type MockTokenManagerMockRecorder struct {
	mock *MockTokenManager
}

// NewMockTokenManager creates a new mock instance.
func NewMockTokenManager(ctrl *gomock.Controller) *MockTokenManager {
	mock := &MockTokenManager{ctrl: ctrl}
	mock.recorder = &MockTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenManager) EXPECT() *MockTokenManagerMockRecorder {
	return m.recorder
}

// NewAccessToken mocks base method.
func (m *MockTokenManager) NewAccessToken(values map[string]any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewAccessToken", values)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewAccessToken indicates an expected call of NewAccessToken.
func (mr *MockTokenManagerMockRecorder) NewAccessToken(values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewAccessToken", reflect.TypeOf((*MockTokenManager)(nil).NewAccessToken), values)
}

// NewRefreshToken mocks base method.
func (m *MockTokenManager) NewRefreshToken(values map[string]any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRefreshToken", values)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRefreshToken indicates an expected call of NewRefreshToken.
func (mr *MockTokenManagerMockRecorder) NewRefreshToken(values any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRefreshToken", reflect.TypeOf((*MockTokenManager)(nil).NewRefreshToken), values)
}

// NewTokenPair mocks base method.
func (m *MockTokenManager) NewTokenPair(accessData, refreshData map[string]any) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewTokenPair", accessData, refreshData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// NewTokenPair indicates an expected call of NewTokenPair.
func (mr *MockTokenManagerMockRecorder) NewTokenPair(accessData, refreshData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewTokenPair", reflect.TypeOf((*MockTokenManager)(nil).NewTokenPair), accessData, refreshData)
}

// ParseWithClaims mocks base method.
func (m *MockTokenManager) ParseWithClaims(tokenString string) (*jwt.MapClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseWithClaims", tokenString)
	ret0, _ := ret[0].(*jwt.MapClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseWithClaims indicates an expected call of ParseWithClaims.
func (mr *MockTokenManagerMockRecorder) ParseWithClaims(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseWithClaims", reflect.TypeOf((*MockTokenManager)(nil).ParseWithClaims), tokenString)
}

// UpdateTokenPair mocks base method.
func (m *MockTokenManager) UpdateTokenPair(refreshToken string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTokenPair", refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateTokenPair indicates an expected call of UpdateTokenPair.
func (mr *MockTokenManagerMockRecorder) UpdateTokenPair(refreshToken any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTokenPair", reflect.TypeOf((*MockTokenManager)(nil).UpdateTokenPair), refreshToken)
}

// ValidateToken mocks base method.
func (m *MockTokenManager) ValidateToken(tokenString string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", tokenString)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockTokenManagerMockRecorder) ValidateToken(tokenString any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockTokenManager)(nil).ValidateToken), tokenString)
}

// ValidateTokenExpiration mocks base method.
func (m *MockTokenManager) ValidateTokenExpiration(token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateTokenExpiration", token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateTokenExpiration indicates an expected call of ValidateTokenExpiration.
func (mr *MockTokenManagerMockRecorder) ValidateTokenExpiration(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateTokenExpiration", reflect.TypeOf((*MockTokenManager)(nil).ValidateTokenExpiration), token)
}
